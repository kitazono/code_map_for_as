#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.13
# from Racc grammer file "".
#

require 'racc/parser.rb'

#
# generated by racc
#
require './cl.rex.rb'

class ClParser < Racc::Parser

module_eval(<<'...end cl.racc/module_eval...', 'cl.racc', 26)

  def parse(file, file_name)
    @file_name = file_name
    @q = ClLexer.new
    @q.load_file(file_name)
    @yydebug = true
    do_parse
  end

  def next_token
    @q.next_token
  end

  def on_error(t, v, values)
    if v
      line = v[0]
      v = v[1]
    else
      line = 'last'
    end
    raise Racc::ParseError, "#{@file_name}:#{line}: syntax error on #{v.inspect}"
  end
...end cl.racc/module_eval...
##### State transition tables begin ###

racc_action_table = [
     2,     3,     4 ]

racc_action_check = [
     0,     1,     3 ]

racc_action_pointer = [
    -2,     1,   nil,     2,   nil ]

racc_action_default = [
    -2,    -2,    -1,    -2,     5 ]

racc_goto_table = [
     1 ]

racc_goto_check = [
     1 ]

racc_goto_pointer = [
   nil,     0 ]

racc_goto_default = [
   nil,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 4, :_reduce_1 ]

racc_reduce_n = 2

racc_shift_n = 5

racc_token_table = {
  false => 0,
  :error => 1,
  :PGM => 2 }

racc_nt_base = 3

racc_use_result_var = false

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "PGM",
  "$start",
  "command" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'cl.racc', 10)
  def _reduce_1(val, _values)
                      @file_name =~ /(.*)\.txt/
                  puts @file_name
                  puts "#{$1} -> #{val[0][1]}" # debug
                  $gv.add  $1 => val[0][1]
                
  end
.,.,

def _reduce_none(val, _values)
  val[0]
end

end   # class ClParser
